"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.capitalize = exports.capitalizeFirstLetter = exports.resolveAcronym = exports.eliminateSpecial = exports.escapeString = void 0;
// eslint-disable-next-line @typescript-eslint/consistent-type-assertions
const optionals = {};
try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    optionals.acronymRes = require('acronymresolver');
}
catch {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
    optionals.acronymRes = null;
}
const spacingAndControl = /[\p{C}\p{Z}]/gu;
const nonLetter = /([^\p{L}\p{Nd} ])/gu;
/**
 * Escape special characters from a string
 * @param {String} input String to escape special characters from
 * @returns {String} the escaped string
 */
function escapeString(input) {
    if (!input)
        return '';
    // Replace zero-width characters with spaces
    input = input.replace(spacingAndControl, ' ');
    // Escape non-letter characters
    input = input.replace(nonLetter, '\\$1');
    return input;
}
exports.escapeString = escapeString;
/**
 * Eliminate all but word characters
 * @param {String} input input string
 * @returns {String} string with only word characters
 */
function eliminateSpecial(input) {
    if (!input)
        return '';
    return input.replace(/[^\w]/g, '');
}
exports.eliminateSpecial = eliminateSpecial;
/**
 * Randomly resolve an acronym
 * @param {String} acronym an acronym (i.e. ABC which usually stands for American Broadcasting Company)
 * @returns {String} randomly resolver acronym
 * @example resolveAcronym('ABC')
 * // => 'Apartment Backing Consult'
 */
function resolveAcronym(acronym) {
    if (!optionals.acronymRes || optionals.acronymRes == null) {
        throw new Error('optional peer dependency `acronymresolver` is needed for this');
    }
    return optionals.acronymRes(eliminateSpecial(acronym).replace(/_/g, ''));
}
exports.resolveAcronym = resolveAcronym;
/**
 * Capitalize the first letter of a string
 * @param {String} string an input string
 * @returns {String} string with first letter capitalized
 * @example capitalizeFirstLetter('abc def GHI')
 * // => Abc def GHI
 */
function capitalizeFirstLetter(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
exports.capitalizeFirstLetter = capitalizeFirstLetter;
/**
 * Capitalize the first letter of every word in a string
 * @param {String} string an input string
 * @param {?String} wordSeparator string to split words by (default: ' ' (space))
 * @returns {String} string with all words capitalized
 * @example capitalize('abc def GHI')
 * // => Abc Def GHI
 *
 * @example capitalize('abc_def', '_')
 * // => Abc_Def
 */
function capitalize(string, wordSeparator = ' ') {
    return string
        .split(wordSeparator)
        .map(word => capitalizeFirstLetter(word))
        .join(wordSeparator);
}
exports.capitalize = capitalize;
exports.default = { escapeString, eliminateSpecial, resolveAcronym, capitalizeFirstLetter, capitalize };
//# sourceMappingURL=StringHelper.js.map