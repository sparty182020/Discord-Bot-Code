"use strict";
/* eslint-disable no-useless-escape */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Validators for various strings
 */
class Validators {
    /**
     * RegExp for URL validation
     */
    urlRegex = /^https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-z]{1,24}\/([-a-zA-Z0-9()@:%._\+~#?&/=]*)$/m;
    /**
     * RegExp for Discord emoji name validation
     */
    emojiRegex = /^[\w]{2,32}$/m;
    invalidName = 'invalid_name';
    /**
     * Validate a URL
     * @param {String} url URL to validate
     * @returns {Boolean} wether the given string is a valid url
     */
    isUrl(url) {
        if (!url)
            return false;
        return this.urlRegex.test(url);
    }
    /**
     * Validate an emoji name
     * @param {String} name name to validate
     * @returns {Boolean} wether the given string is a valid name for discord emojis
     */
    isValidEmojiName(name) {
        if (!name)
            return false;
        return this.emojiRegex.test(name);
    }
    /**
     * Get a name that's valid for discord emojis
     * @param {String} name name to try
     * @returns {String | "invalid_name"} The filtered name or a substitute
     */
    getValidEmojiName(name) {
        if (!name)
            return this.invalidName;
        // Filter disallowed characters
        const emojiName = name.replace(/[^\w]/gi, '');
        if (!emojiName)
            return this.invalidName;
        else if (!this.isValidEmojiName(emojiName))
            return this.invalidName;
        return emojiName;
    }
}
exports.default = new Validators();
//# sourceMappingURL=Validators.js.map