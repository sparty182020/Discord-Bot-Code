"use strict";
/// <reference path="../typings/index.d.ts" />
/**
 * @author TMUniversal <me@tmuniversal.eu>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VariableParser = void 0;
const escape = (string) => string.replace(/./g, '\\$&');
class VariableParser {
    /**
     * Parse in-string variables
     * @param {Object} data key-value object with variables to parse
     * @param {String|String[]} identifiers pair of characters to identify variables by. (default: '{}')
     *
     *  this can be either a String,
     *  resulting in the first two characters becoming the identifiers,
     *
     *  or a tuple of two strings. The two strings will be the identifiers.
     */
    constructor(data, identifiers = '{}') {
        this.data = data !== null && data !== void 0 ? data : {};
        this.identifiers = [identifiers[0], identifiers[1]];
        this.match = new RegExp(`${escape(this.identifiers[0])}[^${escape(this.identifiers[0])}${escape(this.identifiers[1])}]+${escape(this.identifiers[1])}`, 'gu');
        this.identifierRegex = new RegExp(`[${escape(this.identifiers[0])}${escape(this.identifiers[1])}]`, 'gu');
    }
    /**
     * Parse in-string variables.
     * @param {String} input your text
     * @example const Parser = new VariableParser({ users: 69 })
     * Parser.parse("My app has {users} users.")
     * // => "My app has 69 users."
     * @returns {String} parsed input
     */
    parse(input) {
        let output = String(input);
        // behaves differently with 'global' flag, which is provided here.
        // eslint-disable-next-line @typescript-eslint/prefer-regexp-exec
        const vars = output.match(this.match);
        if (!vars || !vars[0]) {
            return input;
        }
        vars.forEach(element => {
            const key = element.replace(this.identifierRegex, '');
            if (Object.getOwnPropertyNames(this.data).includes(key)) {
                output = output.replace(`${this.identifiers[0]}${key}${this.identifiers[1]}`, this.data[key].toString());
            }
        });
        return output;
    }
    /**
     * Set the data object, this is an override.
     * @param {Object} data Override data
     * @returns {Object} the new data object
     */
    setData(data) {
        this.data = data;
        return this.data;
    }
    /**
     * Update/add properties (uses merge)
     * @param {Object} data Update data
     * @returns {Object} the new data object
     */
    updateData(data) {
        this.data = Object.assign(Object.assign({}, this.data), data);
        return this.data;
    }
}
exports.VariableParser = VariableParser;
module.exports = VariableParser;
// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
module.exports.default = VariableParser;
